"use strict";function renderProgressBar(selector,data){const DOM=document.querySelector(selector);if(!DOM)throw"ERROR: could not find element to render new content.";if(!Array.isArray(data))throw"ERROR: need some data (array format).";if(0===data.length)throw"ERROR: need some data (non empty array).";let HTML="";for(let i=0;i<data.length;i++){const skill=data[i];"object"==typeof skill&&("string"==typeof skill.title&&""!==skill.title&&(!isFinite(skill.value)||skill.value<0||skill.value>100||(HTML+=`\n            <div class="progress-bar"\n                data-animated="false"\n                data-value="${skill.value}%">\n                <div class="title">${skill.title}</div>\n                <div class="progress">\n                    <div class="bar" style="width: 0%;">\n                        <div class="value">0%</div>\n                    </div>\n                </div>\n            </div>`)))}if(""===HTML)throw"ERROR: totally messed up dude... no correct data :(";DOM.innerHTML=HTML}function animateProgressBars(progressBarsSelector){const progressBars=document.querySelectorAll(progressBarsSelector+" > .progress-bar");window.addEventListener("scroll",()=>{const windowBottomHeight=window.scrollY+window.innerHeight;for(let i=0;i<progressBars.length;i++){const pg=progressBars[i],bar=pg.querySelector(".bar"),DOMvalue=bar.querySelector(".value"),pgBottonHeight=pg.offsetTop+pg.offsetHeight;pgBottonHeight<windowBottomHeight&&"false"===pg.dataset.animated&&(pg.dataset.animated="true",bar.style.width=pg.dataset.value,animateProgressBarTextValue(DOMvalue,pg.dataset.value))}})}function animateProgressBarTextValue(element,value){const number=parseInt(value),time=2e3,fps=30,refreshTime=1e3/30,totalSteps=2e3/(1e3/30);let step=0;const timer=setInterval(()=>{step++,element.innerText=Math.round(step/totalSteps*number)+"%",step>=totalSteps&&clearInterval(timer)},1e3/30)}export default{renderProgressBar:renderProgressBar,animateProgressBars:animateProgressBars};